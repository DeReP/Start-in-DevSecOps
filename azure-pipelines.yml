trigger:
- master-alt

variables:
  ImageName: 'devops_sec_proj/cws-$(Build.SourceBranchName)'
  tag: '$(Build.BuildId)'

jobs:
- job: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
    # Prepare Analysis Configuration task
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'devops sec proj sonar'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'Automation_DevOps_security_project'

    # Run Code Analysis task
    - task: SonarQubeAnalyze@4

    # Publish Quality Gate Result task
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
    
    # break the build if quality gate failed
    - task: sonar-buildbreaker@8
      inputs:
        SonarQube: 'devops sec proj sonar'

- job: Build
  dependsOn: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.9
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  
  - script: |
      pushd '$(projectRoot)'
      python -m venv env
      source env/bin/activate
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirments.txt  
    displayName: 'Install requirements'

- job: Build_image
  dependsOn: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  steps: 
  - task: Docker@2
    inputs:
      containerRegistry: 'devops sec proj harbor'
      repository: '$(ImageName)'
      command: 'build'
      Dockerfile: 'cwsnew/Dockerfile.prod' #is hardcode path appropriate?
      tags: '$(tag)'

- job: Trivy_scan
  dependsOn: Build_image
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
  - task: Bash@3
    displayName: 'Run Trivy scan'
    inputs:
      targetType: 'inline'
      script: |
        docker run --rm \
          -v '/var/run/docker.sock:/var/run/docker.sock' \
          -v "$(pwd):/src" \
          -v "/tmp/trivy:/.cache/trivy" \
          bitnami/trivy:latest image \
          --format template \
          --template "@src/templates/junit.tpl" \
          --output '/tmp/junit-report.xml' \
          $(ImageName):$(tag)
  
  - task: PublishTestResults@2
    displayName: 'Publish scan results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '/tmp/trivy/junit-report.xml' 
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: 'Trivy scan result'
    condition: 'always()'

- job: push_image_to_registry
  dependsOn: Trivy_scan
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
  - task: Docker@2
    inputs:
      containerRegistry: 'devops sec proj harbor'
      repository: '$(ImageName)'
      command: 'push'
      tags: '$(tag)'