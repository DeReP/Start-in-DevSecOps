trigger:
- master
- master-alt
- master-alt-safe

variables:
  ImageName: 'devops_sec_proj/cws-$(Build.SourceBranchName)'
  tag: '$(Build.BuildId)'
  trivy_server: 'http://10.1.1.170:1000'
  trivy_token: 'pass123'
  registry_url: '10.1.1.170'

jobs:
- job: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
    # Prepare Analysis Configuration task
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'devops sec proj sonar'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'Automation_DevOps_security_project'

    # Run Code Analysis task
    - task: SonarQubeAnalyze@4

    # Publish Quality Gate Result task
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
    
    # break the build if quality gate failed
    - task: sonar-buildbreaker@8
      inputs:
        SonarQube: 'devops sec proj sonar'

- job: Build
  dependsOn: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.9
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  
  - script: |
      pushd '$(projectRoot)'
      python -m venv env
      source env/bin/activate
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirments.txt  
    displayName: 'Install requirements'

- job: Build_image
  dependsOn: Sonar_sec_test
  pool:
    name: DEVOPS-SEC-PROJ
  steps: 
  - task: Docker@2
    inputs:
      command: 'build'
      Dockerfile: 'cwsnew/Dockerfile.prod' #is hardcode path appropriate?
      containerRegistry: 'devops sec proj harbor'
      repository: '$(ImageName)'
      tags: '$(tag)'

- job: Trivy_scan
  dependsOn: Build_image
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
  - task: Bash@3
    displayName: 'Run Trivy scan (search for low, med, high)'
    inputs:
      targetType: 'inline'
      script: |
        trivy client --remote $(trivy_server) \
          --token $(trivy_token) \
          --severity LOW,MEDIUM,HIGH \
          --format template \
          --template "@templates/junit.tpl" \
          --output 'junit-report-low-med-high.xml' \
          $(registry_url)/$(ImageName):$(tag)

  - task: Bash@3
    displayName: 'Run Trivy scan (search for crit)'
    inputs:
      targetType: 'inline'
      script: |
        trivy client --remote $(trivy_server) \
          --token $(trivy_token) \
          --severity CRITICAL \
          --format template \
          --template "@templates/junit.tpl" \
          --output 'junit-report-crit.xml' \
          $(registry_url)/$(ImageName):$(tag)
  
  - task: PublishTestResults@2
    displayName: 'Publish scan results with low, medium, high vulnerabilities'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit-report-low-med-high.xml' 
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Trivy scan result - low, medium and high vulnerabilities'
    condition: 'always()'

  - task: PublishTestResults@2
    displayName: 'Publish scan results with critical vulnerabilities'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit-report-crit.xml' 
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: 'Trivy scan result - critical vulnerabilities'
    condition: 'always()'

- job: push_image_to_registry
  dependsOn: Trivy_scan
  pool:
    name: DEVOPS-SEC-PROJ
  steps:
  - task: Docker@2
    inputs:
      containerRegistry: 'devops sec proj harbor'
      repository: '$(ImageName)'
      command: 'push'
      tags: '$(tag)'